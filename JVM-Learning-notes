JVM学习

1.类加载:在Java代码中，类型的加载，连接与初始化过程都是在程序运行期间完成的。

2.Java虚拟机与程序的生命周期
a):执行了System.exit()方法
b):程序正常执行结束
c):程序在执行过程中遇到异常或错误而异常终止
d):由于操作系统出现错误而导致java虚拟机进程终止

3.类的记载，连接与初始化
a):加载：查找并加载类的二进制数据到内存
b):连接：
    1):验证：确保被加载的类的正确性
    2):准备：为类的静态变量分配内存，并将其初始化为默认值
    3):解析：把类中的符号引用转换为直接引用
c):初始化：为类的静态变量赋予正确的初始值。
d):使用
e):卸载

4.Java 程序对类的使用方式可分为两种
  a):主动使用
  b):被动使用
所有的Java虚拟机实现必须在每个类或接口被Java程序“首次主动使用”时才初始化他们。

主动使用（七种）：
 1):创建类的实例
 2):访问某个类或接口的静态变量，或者对该静态变量赋值
 3):调用类的静态方法
 4):反射（如Class.forName("com.test.Test")）
 5):初始化一个类的子类，也会对父类的一种主动使用
 6):Java虚拟机启动时被标明为启动类的类
 7):JDK1.7开始提供的动态语言支持
除了以上七种情况，其他使用java类的方式都被看作是对类的被动使用，都不会导致类的初始化

5. 类的加载：
类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个 java.lang.Class对象（规范并未说明Class 对象位于哪里，HotSpot虚拟机将其放在了方法区中）用来封闭类在方法区内的数据结构。

6.类的加载：
 加载.class文件的方式
  a):从本地系统中直接加载
  b):通过网络下载.class文件
  c):从zip,jar等归档文件中记载.class文件
  d):从专用数据库中提取.class文件
  e):将java源文件动态编译为.class文件

7.
package com.jvm.classLoader.www;
public class MyTest2 {
	public static void main(String[] args) {
		System.out.println(MyParent2.str);
		//输出：hello world
	}
}

class MyParent2 {
	/*
	 * final常量，在编译阶段，会被存入到时调用这个方法所在类的常量池当中
	 * 本质上，调用类并没有执行引用到定义常量的类，因此并不会触发
	 * 定义常量的类的初始化。
	 * 注意：这里指的是将常量 str 存放到了MyTest2的常量池中
	 * 之后MyTest2与MyParent2之间就没有任何关系，甚至，
	 * 我们可以将MyParent2的class文件删除。
	 */
	public static final String str = "hello world";
		static {
		System.out.println("MyParent2 static block");
	}
}


8.助记符：
ldc:表示将int,float,或是String类型的常量值从常量池中推送到栈顶
bipush:表示将单字节(-128~127)的常量值推送到栈顶
sipush:表示将一个短整型常量值(-32768~32767)推送到栈顶
iconst_1:表示将int类型 1 推送到栈顶 (iconst_-1 ~ iconst_5),5以上又变成            bipush
 anewarray:表示创建一个引用类型的 (如 类，接口，数组)数组，并将其引用值压入栈顶
newarray:表示创建一个指定的原生数据类型（如 int float char 等）的数组，将将其引用值压入栈顶



9.
/*
 * 对于数组实例来说，其类型是由JVM在运行期动态生成的，表示为
 * [Lcom.jvm.classLoader.www.MyParent4;这种形式
 * 动态生成的类型，其父类型就是Object
 * 对于数组来说， JavaDoc经常是将构成数组的元素为Component
 * 实际上就是将数组降低一个维度后的类型
 */
public class MyTest4 {
	public static void main(String[] args) {
		
//		MyParent4 mp = new MyParent4();
		MyParent4[] myparent4s = new MyParent4[1];
		//不会调用MyParent4类的 static块中代码
}
class MyParent4 {
	static {
		System.out.println("MyParent4 static block");
	}
}


10.
package com.jvm.classLoader.www;

import java.util.Random;

public class MyTest5 {
	/*
	 * 当一个接口在初始化时，并不要求其父接口都完成了初始化
	 * 而类的初始化就一定会导致其父类也会被初始化
	 *只有在真正使用到父接口的时候，（如引用接口中所定义的常量时）
	 *才会初始化
	 *接口中的属性本来就是public static final类型的
	 */
	public static void main(String[] args) {
		
		System.out.println(MyChild5.b);
	}

}

interface MyParent5 {
	
	public static final int a = new Random().nextInt(3);
}

interface MyChild5 extends MyParent5{
	
	public static int b = 5;
}


11.
package com.jvm.classLoader.www;

public class MyTest6 {
	
	public static void main(String[] args) {
		
		/*
		 * 调用类的静态方法，就会对类进行主动使用
		 * 就会进行类的准备，初始化阶段
		 */
		Singleton singleton = Singleton.getInstance();
		
		System.out.println(singleton.counter1);//2
		System.out.println(singleton.counter2);//0
	}

}

class Singleton{
	
	//counter1的默认值为0
	public static int counter1 = 1;
	
	private static Singleton singleton = new Singleton();
	
	private Singleton() {
		counter1++;
		counter2++;
		System.out.println("counter1: " + counter1);//2
		System.out.println("counter2: " + counter2);//1
	}
	
	//counter2结果又由1被显式赋值为0
	public static int counter2 = 0;
	
	public static Singleton getInstance() {
		return singleton;
	}
	
}


12.类实例化：
     为新的对象分配内存
     为实例变量赋默认值
     为实例变量赋正确的初始值
     java编译器为它编译的每一个类都至少生成一个实例初始化方法，在java 的 class文件中，这个实例初始化方法被称为"<init>",针对源代码中每一个类的构造方法，java编译器都会产生一个<init>方法。

13.类的加载：
有两种类型的类加载器：
  1):Java虚拟机自带的加载器：
       根类加载器(Bootstrap)
       扩展类加载器(Extension)
       系统（应用）类加载器(System)
2):用户自定义的类加载器
    java.lang.ClassLoader的子类
    用户可以定制类的加载方式
类加载器并不需要等到某个类被"首次主动使用"时再加载它。

14.JVM规范允许类加载器在预料某个类将要被使用时就预先加载它，如果在预先加载的过程中遇到.class文件缺失或存在错误，类加载器必须在程序首次主动使用该类时才报告错误(LinkageError错误)
如果这个类一直没有被程序主动使用，那么类加载器就不会报告错误。

15.类的初始化时机：
   当Java虚拟机初始化一个类时，要求它的所有父类都已经被初始化，但是这条规则并不适用于接口。
    在初始化一个类时，并不会先初始化它所实现的接口
    在初始化一个接口时，并不会先初始化它的父接口
因此，一个父接口并不会因为它的子接口或者实现类的初始化而初始化。只有当程序首次使用特定接口的静态变量时，才会导致该接口的初始化
只有当程序访问的静态变量或静态方法确实在当前类或当前接口中定义时，才可以认为是对类或接口的主动使用。

16.类的初始化时机：
     调用ClassLoader类的loadClass方法加载一个类，并不是对类的主动使用，不会导致类的初始化。

17.类加载器:自顶向下尝试加载类：
从JDK1.2版本开始，类的加载过程采用父亲委托机制。这种机制能更好的保证Java平台的安全。在此委托机制中，除了Java虚拟机自带的根类加载器以外，其余的类加载器都有且只有一个父加载器。当Java程序请求加载器loader1加载 Sample类时，loader1首先委托自己的父加载器去加载Sample类，若父加载器能加载，则由父加载器完成加载任务，否则才由加载器loader1本身加载Sample类。
根类加载器
扩展类加载器
系统类加载器

18.类加载器的父亲委托机制：
 在父亲委托机制中，各个加载器按照父子关系形成了树形结构，除了根类加载器之外，其余的类加载器都有全只有一个父加载器。

20.若有一个类加载器成功加载Test类，那么这个类加载器被称为定义类加载器，所有能成功返回Class 对象引用的类加载(包括定义类加载器)都被称为初始类加载器

21.调用ClassLoader类的方法，加载一个类并不是对类的主动使用，不会导致类的初始化 只有通过反射Class.forName()才会导致对类的主动使用

22.获得ClassLoader的途径
   获得当前类的ClassLoader:
clazz.getClassLoader()

   获得当前线程上下文的ClassLoader:
Thread.currentThread().getContextClassLoader()

   获得系统的ClassLoader:
ClassLoader.getSystemClassLoader()

    获得调用者的ClassLoader:
DriverManager.getCallerClassLoader()


23.类数组类的对象不是由类加载器创建的，而是按照Java运行时的要求自动创建的。 Class.getClassLoader()返回的数组类的类加载器与其元素类型的类加载器相同; 如果元素类型是原始类型，则数组类没有类加载器,为null。

24.命名空间：
每个类加载器都有自己的命名空间，命名空间由该加载器及所有父加载器所加载的类组成。
在同一个命名空间中，不会出现相同的两个类
在不同的命名空间中，有可能会出现相同的两个类

25.类的卸载
当MySample类被加载，连接和初始化后，它的生命周期就开始了。当代表MySample类的Class对象不再被引用，即不可触及时，Class对象就会结束
生命周期，MySample类在方法区内的数据也会被卸载，从而结束Sample类的生命周期。
一个类何时结束生命周期，取决于代表它的Class对象何时结束生命周期。

 26.由Java虚拟机自带的类加载器所加载的类，在虚拟机的生命周期中，始终
不会被卸载。Java虚拟机自带的类加载器包括根类加载器，扩展类加载器，和系统类加载器。Java虚拟机本身会始终引用这些类加载器。而这些类加载器则会始终引用它们所加载的类的Class对象。因此这些Class对象始终是可触及的。
由用户自定义的类加载器所加载的类是可以被卸载的。

27.关于命名空间的重要说明：
  a):子加载器所加载的类能够访问到父加载器所加载的类
  b):而父加载器所加载的类无法访问子加载器所加载的类

28.
public class MyTest2 {
	public static void main(String[] args) throws Exception {
		/*
		 * loader1与loader2没有直接或间接的父子关系
		 * 所以它们所加载的类是相互不可见的
		 */
		MyClassLoader loader1 = new MyClassLoader("loader1");
		MyClassLoader loader2 = new MyClassLoader("loader2");
		/*
		 * loader1是由系统类加载器加载的
		 * loader2：因为系统之前已经加载过了这个Class对象，所以就不会再去加载
		 * 直接返回给loader2,所以loader1与loader2一定是相同的
		 */
		Class<?> clazz1 = loader1.loadClass("com.jvm.classLoader2.www.MyPerson");
		Class<?> clazz2 = loader2.loadClass("com.jvm.classLoader2.www.MyPerson");
		System.out.println(clazz1 == clazz2);//true
		/*
		 * loader1与loader2尽管是不同的类加载器实例，
		 * 但他们都会委托给 应用类加载器加载，所以是同一个类加载器对象所加载的
		 * 都是由系统类加载器来加载的
		 */
		System.out.println("------------------");
		Object obj1 = clazz1.newInstance();
		Object obj2 = clazz2.newInstance();
		Method method = clazz1.getMethod("setMyPerson", Object.class);
		method.invoke(obj1, obj2);
	}


29.不同类加载器的命名空间关系：
同一个命名空间内的类是相互可见的
子加载器的命名空间包含所有父加载器的命名空间。因此由子加载器加载的类能看见父加载器加载的类。例如系统类加载器加载的类能看见根类加载器加载的类。
由父加载器加载的类不能看见子加载器加载的类。
如果两个加载器之间没有直接或间接的父子关系，那么它们各自加载的类相互不可见。
* 在运行期，一个Java类是由该类的完全限定名(binary name 二进制名)和用于
 * 加载该类的定义类加载器(defing loader)所共同决定的
 * 如果同样名字(即相同的完全限定名)的类是由两个不同的加载器所加载，那么这些类就是不同的,
 * 相互不可见的
 * 即使.class文件的字节码完全一样，并且从相同的位置加载亦如此

30.类加载器的双亲委托模型的好处：
  1):可以确保Java核心库的类型安全：所有的Java应用都至少会引用java.lang.Obejct类，也就是说在运行期，java.lang.object这个类会被加载到JVM中，如果这个加载过程是由java应用自己的类加载器所完成的，那么很可能就会在JVM中存在多个版本的java.lang.Object类，而且这些类之间还是不兼容，相互不可见的。(正是命名空间在发挥着作用)
借助于双亲委托机制，Java核心类库中的加载工作都是由启动类加载器来统一完成加载工作，从而确保了Java应用所使用的都是同一个版本的Java核心类库，他们之间是相互兼容的。
  2):可以确保Java核心类库所提供的类不会被自定义的类所替代
  3):不同的类加载器可以为相同名称(binary name)的类创建额外的命名空间。相同名称的类可以并存在java虚拟机中，只需要用不同的类加载器来加载它们即可。不同类加载器所加载的类之间是不兼容的，这就是相当于在JVM内部创建了一个又一个相互隔离的Java类空间，这类技术在很多框架中都得到了实际应用。

31.在Oracle的Hostspot实现中，系统属性sun.boot.class.path如果修改错了，则会运行出错，提示如下错误信息：
Error occurred during initalization of VM
java/lang/NoClassDefFoundError: java/lang/Object


32.内键于JVM中的启动类加载器会加载java.lang.ClassLoader以及其他的Java平台类，当JVM启动时，一块特殊的机器码会运行，它会加载扩展类加载器与系统类加载器，这块特殊的机器码叫做启动类加载器(Bootstrap).
启动类加载器并不是java类，而其他的加载器则都是Java类，启动类加载器是特定于平台的机器指令，它负责开户整个加载过程，所有类加载器除了启动类加载器都被实现为Java类。不过，总归要有一个主键来加载第一个Java类加载器，从而让整个加载过程能顺利进行下去，加载第一个纯Java类加载器就是启动类加载器的职责。
启动类加载器还会负责加载JRE正常运行所需要的基本组件，这包括java.util,java.lang.等包中类。

33.上下文类加载器(Context ClasssLoader):
package com.jvm.classLoader2.www;
/*
 * 当前类加载器(Current ClassLoader):
 * 每个类都会使用自己的类加载器(即加载自身的类加载器)来去加载其他类(指的是它所依赖的类)
 * 如果ClassX引用了ClassY，那么 ClassX类的加载器就会去加载ClassY，(前提是ClassY尚未被加载)
 * 
 * 线程上下文类加载器 （Context ClassLoader）:
 * 线程上下文类加载器是从JDK1.2开始引入的，类Thread中的getContextClassLoader()
 * 与setContextClassLoader(ClassLoader cl)分别用来获取和设置上下文类加载器
 * 如果没有通过setContextClassLoader(ClassLoader cl)进行设置的话，线程将继承
 * 其父线程的上下文类加载器,Java应用运行时的初始线程的上下文类加载器是系统类加载器，在线程中运行的
 * 代码可以可能该类加载器来加载类与资源。
 */
public class MyTest4 {
	public static void main(String[] args) {
		System.out.println(Thread.currentThread().getContextClassLoader());
		//sun.misc.Launcher$AppClassLoader@73d16e93
		System.out.println(Thread.class.getClassLoader());
		//null
	}
}


34.线程上下文类加载器的重要性：
SPI(Service Provider Interface):服务提供者接口
父ClassLoader可以使用当前线程Thread.currentThread.getContextClassLoader()
所指定的classLoader加载的类，这就改变了父ClassLoader不能使用子ClassLoader或其他没有直接父子关系的ClassLoader加载的类的情况，即改变了双亲委托模型。
线程上下文类加载器就是当前线程的Current ClassLoader.在双亲委托模型下，类加载是由下至上的，即下层的类加载器会委托上层进行加载，但对于SPI来说，有些接口是Java核心库提供的。而Java核心库是由启动类加载器来加载的，而这些接口的实现却来自于不同的jar包(一般是厂商提供)，而Java的启动类加载器是不会加载其他来源的jar包，这样传统的双亲委托模型就无法满足SPI的要求。而通过给当前线程设置上下文类加载器，就可以由设置的上下文类加载器来实现对于接口实现类的加载。

35.默认的上下文类加载器都是系统类加载器，是在Launcher源码中设置的

36.线程上下文类加载器的一般使用模式(获取，使用，还原):
               获取
  ClassLoader cl = Thread.currentThread().getContextClassLoader();
  try{
              使用
    Thread.currentThread().setContextClassLoader(targetTccl);
     myMethod();
  }
  finally {
               还原
     Thread.currentThread().setContextClassLoader(classLoader)
  }

  
  myMethod()里面则调用了Thread.currentThread().getContextClassLoader()
     获取当前线程的上下文类加载器做某些起事情。
     如果一个类由类加载器A加载，那么这个类的依赖类也是由相同的类加载器加载(前提该依赖类之前还没有被加载过)
  ContextClassLoader的作用就是为了破坏Java的双亲委托机制。
      当高层提供了统一的接口让底层去实现，同时又要在高层加载(或实例化)底层的类时，就必须要通过线程上下文 加载器来帮助高层的 ClassLoader找到并加载该类。默认线程上下文类加载器就是应用类加载器(AppClassLoader)

37.类的验证：
 a):类文件的结构检查
 b):语义检查
 c):字节码验证
 d):二进制兼容性的验证
 
38.类的初始化步骤：
 a):假如这个类还没有被加载和连接，那就先进行加载和连接
 b):假如类存在直接父类，并且这个父类还没有被初始化，那就先初始化直接父类
 c):假如类中存在初始化语句，那就依次执行这些初始化语句。

39.
Bootstrap ClassLoader：启动类加载器,$JAVA_HOMEK中jre/lib/rt.jar里所有的class由c++实现，不是ClassLoader子类
Extension ClassLoader:扩展类加载器,负责加载java平台扩展功能的一些jar包，包括$JAVA_HOME中jre/lib/*.jar或 -Djava.ext.dirs指定目录下的jar包
App ClassLoader:系统类加载器，负责加载classpath中指定的jar包及目录中class

40.父亲委托机制的好处：
能够提高软件系统的安全性。因此在此机制下，用户自定义的类加载器不可能加载应该由父加载器加载的可靠类，从而防止不可靠甚至恶意的代码替代由父加载器加载的可靠代码。例如：java.lang.Object类总是由根类加载器加载，其他任何用户自定义的类加载器都不可能 加载含有恶意代码的java.lang.Object类。

41.创建用户自定义的类加载器：
要创建用户自定义的类加载器，只需要扩展java.lang.ClassLoader类，然后覆盖它的findClass(String name)方法即可，该方法根据参数指定的类的名字，返回对应的Class对象的引用。

42.不同类加载器的命名空间关系：
同一个命名空间内的类是相互可见的。
子加载类的命名空间包含所有父加载器的命名空间。因此由子加载器加载的类能看见父加载器加载的类。例如系统类加载器加载的类能看见根类加载器加载的类。
由父加载器加载的类不能看见子加载器加载的类。
如果两个加载器之间没有直接或间接的父子关系，那么它们各自加载的类相互不可见。

43.
需要指出的是，加载器之间的父子关系实际上指的是加载器对象之间的包含关系，而不是类之间的继承关系。一对父子加载器可能是同一个加载器类的两个实例，也可能不是。在子加载器对象中包装了一个父加载器对象。例如以下loader1和loader2 都是MyClassLoader类的实例，并且loader2包装了loader1,loader1是loader2的父加载器。
ClassLoader loader1 = new ClassLoader();
//参数loader1将作为loader2的父加载器
ClaaLoader loader2 = new ClassLoader(loader1);



44.Java字节码：
 1):使用javap -verbose命令分析一个字形码文件时，将会分析该字形码的魔数，版本号，常量池，类信息，类的构造方法，类中方法信息，类变量与成员变量等信息。
 2):魔数：所有的.class字形码文件的前4个字节都是魔数，魔数值为固定值：0xCA FE BA BE(咖啡宝贝)
 3):魔数之后的4个字节为版本信息，前两个字节表示minor version(次版本号)，后两个字节为表示major version(主版本号).例如 00 00 00 34,换算成十进制，表示次版本号为：0，主版本号为：52。所以，该文件的版本为：1.8.0.可以通过java -version命令来验证。
 4):常量池(constant pool)：紧接着主版本号之后的就是常量池入口。一个Java类定义的很多信息都是由常量池来维护和描述的，可以将常量池看作是 Class文件的资源仓库。比如说：Java类中定义的方法与变量信息，都是存储在常量池中。常量池中主要存储两类常量：字面量与符号引用。
   4.1):字面量：文本字符串，Java中声明为final的常量值
   4.2):符号引用：类和接口的全局限定名，字段的名称和描述符，方法的名称和描述符等。
 5):常量池的总体结构：Java类所对应的常量池主要由常量池数量与常量池数组(常量表)这两部分共同构成。常量池数量紧跟在主版本号后面，占据2个字节；常量池数组则紧跟在常量池数量之后。常量池数组与一般的数组不同的是：常量池数组中不同的元素的类型，结构都是不同的，长度当然也就不同；但是，每一种元素的第一个数据都是一个u1类型，该字节是一个标志位，占据1个字节，JVM在解析常量池时，会根据这个u1类型来获取元素的具体类型。值得注意的是，常量池数组中元素的个数 =  常量池数 - 1(其中0暂时不使用)。
目的是满足某些常量池索引值的数据在特定情况下需要表达：不引用任何一个常量池的含义；根本原因在于，索引为0也是一个常量(保留常量)，只不过它不位于常量表中，这个常量就对应null值。所以，常量池的索引从1而非0开始。

45.在JVM规范中，每个变量/字段都有描述信息，描述信息主要是描述字段的数据类型，方法的参数列表(包括数量，类型与顺序)与返回值。根据描述符规则，基本数据类型和代表无返回值的void类型都是用一个大写字符来表示，对象类型则使用字符L加对象的全限定名称来表示。为了压缩字节码文件的体积 。对于基本数据类型，JVM都只使用一个大写字母表示，如下所示：
 B - byte ,C - char ,D - double,F - float,I - int,J - long,S - short,Z - boolean,V  -void,L -  对象类型（Ljava/lang/String;）
对于数组类型来说，每一个维度使用一个前置的[来表示，如int[]被记录 [ I,
String[][]被记录为 [ [ Ljava/lang/String;

46.用描述符描述方法时，按照先参数列表，后返回值的顺序来描述。参数列表按照参数的严格顺序放在一组 () 之内，如方法:String getRealNamyById(int id,String name)的描述符为: (I,Ljava/lang/String;) Ljava/lang/String;

47. 


48.Java字节码结构：
Class字节码中有两种数据类型：
 a):字节数据直接量：这是基本数据类型。共细分u1,u2,u4,u8四种，分别代表连续的1个字节，2个字节，4个字节，8个字节组成的整体数据。
 b):表（数组）：表是由多个基本数据或其他表，按照既定顺序组成的大的数据集合。表是有结构的，它的结构体现在：组成表的成分所在的位置和顺序都是已经严格定义好的。

49.Access_Flag访问标志：
访问标志信息包括该Class文件是类还是接口，是否被定义成public，是否是abstract, 如果是类，是否声明成final。通过上面的源代码，我们知道该文件是类并且是public.

50.

0x0021:是0x0020和0x0001的并集，表示ACC_PUBLIC与ACC_SUPER
0x0002：表示是private类型。
0x229:表示是public static 类型

51.字段表集合：
字段表用于描述类和接口中声明的变量。这里的字段包含了类级别变量以及实体变量，但是不包括方法内部声明的局部变量。

52.Code结构：
a):attribute_length:表示attribute所包含的字节数，不包含attribute_name_index和attribute_length字段（方法中所对应的代码的指令）
b):max_stack:表示这个方法运行的任何时刻所能达到的操作数栈的最大深度
c):max_locals:表示方法执行期间创建的局部变量的数目，包含用来表示传入参数的局部变量。
d):code_length:表示该方法所包含的字节码的字节数以及具体的指令码，具体字节码即是该方法被调用时，虚拟机所执行的字节码。
f):exception_table:这是存放的是处理异常的信息
g):每个exceptin_table表项由start_pc,end_pc,handler_pc,catch_type组成

53.附加属性：
接下来是该方法的附加属性，
LineNumberTable:这个属性用来表示 code数组中字节码和Java代码行数之间的关系 。这个属性可以用来在调试的时候定位代码执行的行数。

54.对于Java中非静态方法（非static方法，一个实例方法）来说，它至少会有一个局部变量，就是 this。在字节码中 this是作为方法的第一个参数隐式的传进来的。在编译器隐式传进来的，所以每一个实例方法中都是可以访问 this，放置在方法的第一个参数上。在编译期就将 this 放置每一个非静态方法中的局部变量第一个位置上。

55.Java字节码整体结构：


56.在一个java类中的 成员属性(非static类型)的赋值是在类的默认构造方法中实现(通过类生成class字节码文件可以得到)，如果一个类有多个构造方法，则每个构造方法都会先对成员属性赋值，再执行自己相应的代码。

57.java类中的静态成员变量(static类型)，以及定义的静态代码块中的内容，都会统一的在一个叫 CLinit()方法中去执行（通过class字节码文件可得到）

 58.对于Java类听每一个实例方法（非static方法），其在编译后所生成的字节码当中，方法参数的数量总是会比源代码中方法参数的数量多一个（this），它位于方法的第一个参数位置处；这样，我们就可以在java的实例方法中使用this来去访问当前对象的属性以及其他方法。
这个操作是在编译期间完成的，即由javac编译器在编译的时候将对this的访问转化为对一个普通实例方法参数的访问，接下来的运行期间，由JVM在调用实例方法时，自动向实例方法传入该this参数。所以，在实例方法的局部变量表中，至少会有一个指向当前对象的局部变量。

60.Code 结构：
exception_table:这里存放的是处理异常的信息，每个exception_table表项由
start_pc,end_pc,handler_pc ,catch_type组成。
1):start_pc 和 end_pc表示在code数组中的从start_pc到end_pc处（包含start_pc，不包含end_pc）的指令抛出异常会由这个表项（handler_pc）来处理。
2):handler_pc表示处理异常的代码的开始处。catch_type表示会被处理的异常类型，它指向常量池里的一个异常类。当catch_type为0时，表示处理所有的异常。

61.java字节码对于异常的处理方式：
 1):统一采用异常表的方式来对异常进行处理
 2):在jdk 1.4.2之前的版本中，并不是采用异常表的方式来对异常进行处理的。而是采用特定的指令方式。
 3):当异常处理存在finally语句块时，现代化的JVM采取的处理方式是将finally语句块的字节码拼接到每一个catch块后面，换句话说，程序中存在多少个catch块，就会在每一个catch块后面重复多少个finally语句块的字节码，再通过goto 语句到 return 语句返回，结束方法执行。
 4):从源代码中看在多个catch块后面只会有一个finally语句块，而从编译后的字节码来看，在每个catch块后面都会有一个finally语句块。

62.栈帧(stack frame):
栈帧是一种用于帮助虚拟机执行方法调用与方法执行的数据结构。
栈帧本身是一和数据结构，封闭了方法的局部变量表，动态链接信息，方法的返回地址以及操作数栈等信息。
符号引用：
直接引用：
有些符号引用是在类加载阶段或是第一次使用时就会转换为直接引用，这种转换叫做静态解析；另外一些符号引用则是在每次运行期转换为直接引用，这种转换叫做动态链接，这体现为Java的多态性。

63.在字节码中常用的调用方法的指令：
1: invokeinterface:调用接口中的方法，实际上是在运行期间决定的，决定到底调用实现该接口的哪个对象的特定方法。
2: invokestatic:调用静态方法
3.invokespecial:调用自己的私有方法，构造方法(<init>),以及父类的方法。
4.invokevirtual:调用虚方法，运行期动态查找的过程。
5.invokeDynamic:动态调用方法。

64.静态解析的4种情形:在解析阶段将符号引用转换为直接引用
 1):静态方法
 2):父类方法
 3):构造方法
 4):私有方法(无法重写)
以上4类方法称作为非虚方法，他们是在类加载阶段就可以将符号引用转换为直接引用的。

65.
package com.bytecode.www;
/*
   方法的静态分派：
   Grandpa g1 = new Father();
   以上代码:g1的静态类型 Grandpa，而g1的实际类型（真正指向的类型）
   是Father.
   我们可以得到这样一个结论：变量的静态类型是不会发生变化的。
   而变量的实际类型则
   是可以发生变化的（多态的一种体现）。实际类型是在运行期间方可确定。
 */
public class MyTest5 {
    /*
    方法的重载，对于JVM来说，是一种静态的行为,编译期间就可以确定了
    对于g1,g2来说，他们的静态行为是 Grandpa,
    所以会调用参数是 Grandpa 类型的方法
     */
    public void test(Grandpa grandpa){
        System.out.println("grandpa");
    }
    public void test(Father father){
        System.out.println("father");
    }
    public void test(Son son){
        System.out.println("son");
    }

    public static void main(String[] args) {

        Grandpa g1 = new Father();
        Grandpa g2 = new Son();

        MyTest5 test5 = new MyTest5();
        test5.test(g1);
        test5.test(g2);
        /*
        输出结果：
         grandpa
         grandpa
         */
    }
}
class Grandpa {
}
class Father extends Grandpa {
}
class Son extends Father{
}


66.在Java中，new 这个关键字有三个作用：
 1):在内存中开辟空间，针对于堆中
 2):通过调用构造方法生成对象
 3):将生成的对象在堆上的引用返回并赋给引用对象

67.
package com.bytecode.www;
/*
  方法的动态分派：
  方法的动态分派涉及到一个重要概念：方法接收者。
  invokevirtual字节码指令的多态查找流程
  1）：找到操作数栈顶的第一个元素（引用），它所指向对象的实际类型
  2）：如果在常量池中找到与方法描述符，和方法名称一样的情况下
        并且访问权限也通过的话
  3) ：将符号引用转换为找到实例的直接引用，并调用该方法
  4）：如果没有找到，则根据继承体系，从下往上找，直到找到，没有则抛出异常
  比较方法重载（overload）和方法重写（override），我们可以得到结论：
  方法重载是静态的，是编译期行为，方法重写是动态的，是运行期行为。
 */
public class MyTest6 {
    public static void main(String[] args) {
        Fruit apple = new Apple();
        Fruit orange = new Orange();

        apple.test();
        orange.test();

        apple = new Orange();
        apple.test();
        /*
        输出结果：
        apple
        orange
        orange
         */
    }
}
class Fruit {
    public void test(){
        System.out.println("fruit");
    }
}
class Apple extends Fruit {
    @Override
    public void test() {
        System.out.println("apple");
    }
}
class Orange extends Fruit {
    @Override
    public void test() {
        System.out.println("orange");
    }
}


68.针对于方法调用动态分派的过程：
虚拟机会在类的方法区建立一个虚方法表的数据结构（virtual method table,vtable）
针对于invokeinterface指令来说，虚拟机会建立一个叫做接口方法表的数据结构(interface method table,itable)

69.
现代JVM在执行Java代码的时候，通常都会将解释执行与编译执行二者结合起来进行
所谓解释执行，就是通过解释器来读取字节码遇到相应的指令就去执行该指令
编译执行，是通过即时编译器（Just in time，JIT）将字节码转换为
本地机器码来执行。现代JVM会根据代码热点（使用频率高的代码）来生成相应本地机器码

70.基于栈的指令集与基于寄存器指令集之间的关系：
 1）：JVM执行指令时所采取的方式是基于栈的指令集
 2）：基于栈的指令集主要的是操作有入栈与出栈两种
 3):基于栈的指令集的优势在于它可以在不同的平台之间移植，而基于寄存器的指令集与
硬件架构紧密关联的，无法做到可移植
 4): 基于栈的指令集的缺点在于完成相同的操作，指令数量通常要比基于寄存器的指令集数量要多
基于栈的指令集是在内存中完成操作的，而基于寄存器的指令集是直接由CPU来执行，它是在高速缓冲区
中执行的，速度要快很多，虽然虚拟机可以采用一些优化手段，但总的来说，基于栈的指令集的执行要慢一些

71.JVM内存空间划分与作用详解：
/**
   虚拟机栈：Stack Frame 栈帧
   程序技术器(Program Counter):
   本地方法栈：主要用于处理执行本地方法(native方法)
   堆(Heap):JVM管理的最大一块内存空间
   方法区（Method Area）：存储元信息.永久代(Permanent Generation):从jdk8开始
   已经彻底废弃了永久代，使用元空间(meta space)
   运行时的常量池：方法区的一部分,在编译期间就能够确定好的。
   直接内存(Direct Memory):由操作系统来进行管理
 */






























